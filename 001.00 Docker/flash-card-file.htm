<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>DevOps Flashcards — Rotating Card</title>
  <style>
    :root{
      --bg:#0b0f14;--panel:#111826;--ink:#e6eef7;--muted:#9fb0c3;--accent:#7cc6ff;--accent2:#a78bfa;--good:#7bed9f;--warn:#ffd166;
      --radius:18px;--shadow:0 20px 60px rgba(0,0,0,.45),inset 0 0 0 1px rgba(255,255,255,.04);
      --card-w:760px;--card-h:420px;--z:340px;
    }
    *{box-sizing:border-box}
    body{margin:0;background:radial-gradient(1200px 800px at 20% 0%,#0e1521 0,#0b0f14 40%,#080b0f 100%);color:var(--ink);font:500 16px/1.55 ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial}
    header{padding:18px clamp(16px,4vw,28px);display:flex;justify-content:space-between;align-items:center;gap:10px;flex-wrap:wrap}
    h1{margin:0;font-size:22px}
    .controls{display:flex;gap:8px;flex-wrap:wrap}
    button{background:linear-gradient(180deg,rgba(255,255,255,.06),rgba(255,255,255,.03));color:var(--ink);border:1px solid rgba(255,255,255,.1);border-radius:12px;padding:8px 14px;cursor:pointer;box-shadow:var(--shadow);font-size:14px}
    button:hover{border-color:rgba(124,198,255,.5)}
    main{display:grid;place-items:center;padding:12px}
    .stage{width:min(var(--card-w),96vw);min-height:var(--card-h);height:auto;perspective:1400px;margin:auto;margin-top:8px;z-index:1;}
    .scene{width:100%;height:100%;position:relative}
    .cube{position:absolute;inset:0;margin:auto;transform-style:preserve-3d;transition:transform 650ms cubic-bezier(.2,.85,.2,1)}
    .face{position:absolute;inset:0;padding:26px;border-radius:var(--radius);display:flex;flex-direction:column;justify-content:space-between;gap:14px;background:linear-gradient(180deg,rgba(255,255,255,.06),rgba(255,255,255,.02));border:1px solid rgba(255,255,255,.1);box-shadow:var(--shadow);backface-visibility:hidden;-webkit-backface-visibility:hidden}
    .face .tag{font-size:12px;letter-spacing:.3px;color:var(--muted);text-transform:uppercase}
    .face h2{margin:6px 0 8px 0;font-size:22px}
    .hint{color:var(--muted);font-size:13px}
    .front{transform:translateZ(var(--z));border-color:rgba(167,139,250,.4)}
    .right{transform:rotateY(90deg) translateZ(var(--z))}
    .back{transform:rotateY(180deg) translateZ(var(--z))}
    .left{transform:rotateY(-90deg) translateZ(var(--z))}
    .pill{border:1px solid rgba(255,255,255,.1);padding:6px 10px;border-radius:999px;color:var(--muted)}
    .facetoolbar{display:flex;gap:10px;flex-wrap:wrap;margin:6px 0 14px 0;position:relative;z-index:1000;pointer-events:auto}
    .btnQ{background:#2a3750}.btnTB{background:#3b2d55}.btnMF{background:#4b3a20}.btnRW{background:#1f3b2a}.btnASCII{background:#33394d}
    .facetoolbar button.active{outline:2px solid var(--accent);box-shadow:0 0 0 2px rgba(124,198,255,.25) inset}
    #ascii-face{display:none;position:relative;padding:20px;border-radius:var(--radius);background:linear-gradient(180deg,rgba(255,255,255,.06),rgba(255,255,255,.02));border:1px solid rgba(255,255,255,.1);box-shadow:var(--shadow);display:flex;flex-direction:column;height:auto}
    #ascii-text{white-space:pre;font-family:monospace;font-size:14px;line-height:1.3;overflow-x:auto}
  </style>
</head>
<body>
  <header>
    <h1 id="deckTitle">Lab — Flashcards</h1>
    <div class="controls">
      <button id="prevBtn">◀ Prev</button>
      <button id="nextBtn">Next ▶</button>
      <button id="rotateBtn">Rotate ⟳</button>
      <button id="shuffleBtn">Shuffle</button>
    </div>
  </header>

  <main>
    <div class="facetoolbar" id="facetoolbar">
      <button class="btnQ" id="btnQ" data-face="0">Question</button>
      <button class="btnTB" id="btnTB" data-face="1">Textbook</button>
      <button class="btnMF" id="btnMF" data-face="2">Metaphor</button>
      <button class="btnRW" id="btnRW" data-face="3">Real-World</button>
      <button class="btnASCII" id="btnASCII">ASCII</button>
    </div>

    <div class="stage">
      <div class="scene">
        <div class="cube" id="cube">
          <section class="face front">
            <div><div class="tag">Question</div><h2 id="q">Question text</h2><p class="hint">Use the buttons above to rotate to each answer.</p></div>
            <div><span class="pill" id="progress">1 / 1</span></div>
          </section>
          <section class="face right"><div><div class="tag">Answer — Textbook</div><h2 id="a-textbook">Answer textbook</h2><p class="hint">Clear, interview-friendly definition.</p></div></section>
          <section class="face back"><div><div class="tag">Answer — Metaphor</div><h2 id="a-metaphor">Answer metaphor</h2><p class="hint">Analogy to lock it into memory.</p></div></section>
          <section class="face left"><div><div class="tag">Answer — Real-World</div><h2 id="a-realworld">Answer real-world</h2><p class="hint">How it plays out day-to-day.</p></div></section>
        </div>
        <div id="ascii-face"><div><div class="tag">ASCII Diagram</div><pre id="ascii-text">[ASCII diagram here]</pre></div></div>
      </div>
    </div>
  </main>

  <script>
  document.addEventListener('DOMContentLoaded', async ()=>{
    const cube=document.getElementById('cube');
    const q=document.getElementById('q'),aTB=document.getElementById('a-textbook'),aMF=document.getElementById('a-metaphor'),
          aRW=document.getElementById('a-realworld'),progress=document.getElementById('progress'),
          asciiFace=document.getElementById('ascii-face'),asciiText=document.getElementById('ascii-text');
    const btnQ=document.getElementById('btnQ'),btnTB=document.getElementById('btnTB'),
          btnMF=document.getElementById('btnMF'),btnRW=document.getElementById('btnRW'),btnASCII=document.getElementById('btnASCII');
    const prev=document.getElementById('prevBtn'),next=document.getElementById('nextBtn'),
          rotate=document.getElementById('rotateBtn'),shuffle=document.getElementById('shuffleBtn');
    let deck=null,idx=0,rot=0;
    const setActive=f=>{[btnQ,btnTB,btnMF,btnRW,btnASCII].forEach(b=>b.classList.remove('active'));
      if(f==='ascii')btnASCII.classList.add('active');else if(f>=0&&f<=3)[btnQ,btnTB,btnMF,btnRW][f].classList.add('active');};
    const rotateTo=f=>{rot=((f%4)+4)%4;cube.style.transform=`rotateY(${rot*90}deg)`;setActive(rot);cube.style.display='block';asciiFace.style.display='none';};
    const render=()=>{if(!deck)return;const c=deck.cards[idx];
      q.textContent=c.question||'';aTB.textContent=c.answer_textbook||'';aMF.textContent=c.answer_metaphor||'';aRW.textContent=c.answer_realworld||'';
      progress.textContent=`${idx+1} / ${deck.cards.length}`;rotateTo(0);
      if(c.guid)history.replaceState(null,'','#'+c.guid);};
    async function loadDeck(file){
      try{
        const res=await fetch(file+'?ts='+Date.now(),{cache:'no-store'});
        if(!res.ok)throw new Error('HTTP '+res.status);
        const json=await res.json();
        if(!json||!Array.isArray(json.cards))throw new Error('Invalid deck schema');
        deck=json;
        const hash=location.hash.replace(/^#/,''),found=deck.cards.findIndex(c=>c.guid===hash);
        idx=found>=0?found:0;
        document.getElementById('deckTitle').textContent=deck.title||'Deck';
        render();
      }catch(e){
        console.warn('Deck load failed:',e);
        deck={title:'Demo',cards:[{guid:'demo',question:'What is Docker?',answer_textbook:'A container platform.',answer_metaphor:'Like a shipping container for apps.',answer_realworld:'Docker packages and runs your code anywhere.'}]};
        idx=0;render();
      }
    }
    const nextCard=()=>{idx=(idx+1)%deck.cards.length;render();};
    const prevCard=()=>{idx=(idx-1+deck.cards.length)%deck.cards.length;render();};
    const shuffleDeck=()=>{for(let i=deck.cards.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[deck.cards[i],deck.cards[j]]=[deck.cards[j],deck.cards[i]];}idx=0;render();};
    [btnQ,btnTB,btnMF,btnRW].forEach((b,i)=>b.addEventListener('click',()=>rotateTo(i)));
    btnASCII.addEventListener('click',()=>{
      if(!deck||!deck.cards[idx])return;
      const guid=deck.cards[idx].guid,path=`quiz-ascii/${guid}.txt`;
      fetch(path).then(r=>r.ok?r.text():Promise.reject()).then(t=>{
        cube.style.display='none';asciiFace.style.display='flex';asciiText.textContent=t.trim()||'⚠️ No ASCII diagram content found.';setActive('ascii');
      }).catch(()=>{
        cube.style.display='none';asciiFace.style.display='flex';asciiText.textContent='ℹ️ No ASCII diagram exists for this card.';setActive('ascii');
      });
    });
    prev.addEventListener('click',prevCard);next.addEventListener('click',nextCard);
    rotate.addEventListener('click',()=>rotateTo(rot+1));shuffle.addEventListener('click',shuffleDeck);
    window.addEventListener('keydown',e=>{
      if(e.key==='1')rotateTo(0);else if(e.key==='2')rotateTo(1);else if(e.key==='3')rotateTo(2);else if(e.key==='4')rotateTo(3);
      else if(e.key==='a')btnASCII.click();else if(e.code==='Space'){e.preventDefault();rotateTo(rot+1);}
      else if(e.key==='ArrowRight')nextCard();else if(e.key==='ArrowLeft')prevCard();
    });
    // --- dynamic deck selection ---
    const deckFile=location.hash.replace(/^#/, '')||'flash-card-file.json';
    await loadDeck(deckFile);
  });
  </script>
</body>
</html>
