
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>DevOps Flashcards — Rotating Card</title>
  <style>
    :root{
      --bg:#0b0f14; --panel:#111826; --ink:#e6eef7; --muted:#9fb0c3; --accent:#7cc6ff; --accent2:#a78bfa; --good:#7bed9f; --warn:#ffd166;
      --radius:18px; --shadow:0 20px 60px rgba(0,0,0,.45), inset 0 0 0 1px rgba(255,255,255,.04);
      --card-w: 760px; --card-h: 420px; --z: 340px;
    }
    *{box-sizing:border-box}
    body{margin:0;background:radial-gradient(1200px 800px at 20% 0%,#0e1521 0,#0b0f14 40%,#080b0f 100%);color:var(--ink);font:500 16px/1.55 ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial}
    header{padding:18px clamp(16px,4vw,28px);display:flex;justify-content:space-between;align-items:center;gap:10px;flex-wrap:wrap}
    h1{margin:0;font-size:22px}
    .controls{display:flex;gap:8px;flex-wrap:wrap}
    button{background:linear-gradient(180deg,rgba(255,255,255,.06),rgba(255,255,255,.03));color:var(--ink);border:1px solid rgba(255,255,255,.1);border-radius:12px;padding:8px 14px;cursor:pointer;box-shadow:var(--shadow);font-size:14px}
    button:hover{border-color:rgba(124,198,255,.5)}

    main{display:grid;place-items:center;padding:12px}

    /* stage auto-expands */
    .stage{
      width:min(var(--card-w),96vw);
      min-height: var(--card-h);
      height:auto;
      perspective:1400px;
      margin:auto;
      margin-top:8px;
      z-index:1;
    }
    .scene{width:100%;height:100%;position:relative}
    .cube{position:absolute;inset:0;margin:auto;transform-style:preserve-3d;transition:transform 650ms cubic-bezier(.2,.85,.2,1)}
    .face{position:absolute;inset:0;padding:26px;border-radius:var(--radius);display:flex;flex-direction:column;justify-content:space-between;gap:14px;background:linear-gradient(180deg,rgba(255,255,255,.06),rgba(255,255,255,.02));border:1px solid rgba(255,255,255,.1);box-shadow:var(--shadow);backface-visibility:hidden;-webkit-backface-visibility:hidden}
    .face .tag{font-size:12px;letter-spacing:.3px;color:var(--muted);text-transform:uppercase}
    .face h2{margin:6px 0 8px 0;font-size:22px}
    .hint{color:var(--muted);font-size:13px}

    .front{transform:translateZ(var(--z));border-color:rgba(167,139,250,.4)}
    .right{transform:rotateY(90deg) translateZ(var(--z))}
    .back{transform:rotateY(180deg) translateZ(var(--z))}
    .left{transform:rotateY(-90deg) translateZ(var(--z))}

    .pill{border:1px solid rgba(255,255,255,.1);padding:6px 10px;border-radius:999px;color:var(--muted)}

    .facetoolbar{display:flex;gap:10px;flex-wrap:wrap;margin:6px 0 14px 0;position:relative;z-index:1000;pointer-events:auto}
    .btnQ{background:#2a3750}
    .btnTB{background:#3b2d55}
    .btnMF{background:#4b3a20}
    .btnRW{background:#1f3b2a}
    .btnASCII{background:#33394d}

    /* Active face highlight */
    .facetoolbar button.active{outline:2px solid var(--accent); box-shadow:0 0 0 2px rgba(124,198,255,.25) inset}

    /* ASCII panel (auto-expand) */
    #ascii-face {
      display:none;
      position:relative;
      padding:20px;
      border-radius:var(--radius);
      background:linear-gradient(180deg,rgba(255,255,255,.06),rgba(255,255,255,.02));
      border:1px solid rgba(255,255,255,.1);
      box-shadow:var(--shadow);
      display:flex;
      flex-direction:column;
      height:auto;
    }
    #ascii-text {
      white-space: pre;
      font-family: monospace;
      font-size: 14px;
      line-height: 1.3;
      overflow-x: auto;  /* horizontal scroll only */
    }
  </style>
</head>
<body>
  <header>
    <h1 id="deckTitle">Lab — Flashcards</h1>
    <div class="controls">
      <button id="prevBtn">◀ Prev</button>
      <button id="nextBtn">Next ▶</button>
      <button id="rotateBtn">Rotate ⟳</button>
      <button id="shuffleBtn">Shuffle</button>
    </div>
  </header>

  <main>
    <div class="facetoolbar" id="facetoolbar">
      <button class="btnQ"  id="btnQ"  data-face="0">Question</button>
      <button class="btnTB" id="btnTB" data-face="1">Textbook</button>
      <button class="btnMF" id="btnMF" data-face="2">Metaphor</button>
      <button class="btnRW" id="btnRW" data-face="3">Real-World</button>
      <button class="btnASCII" id="btnASCII">ASCII</button>
    </div>

    <div class="stage">
      <div class="scene">
        <div class="cube" id="cube">
          <section class="face front">
            <div>
              <div class="tag">Question</div>
              <h2 id="q">Question text</h2>
              <p class="hint">Use the buttons above to rotate to each answer.</p>
            </div>
            <div><span class="pill" id="progress">1 / 1</span></div>
          </section>

          <!-- Right face = Textbook -->
          <section class="face right">
            <div>
              <div class="tag">Answer — Textbook</div>
              <h2 id="a-textbook">Answer textbook</h2>
              <p class="hint">Clear, interview-friendly definition.</p>
            </div>
          </section>

          <!-- Back face = Metaphor -->
          <section class="face back">
            <div>
              <div class="tag">Answer — Metaphor</div>
              <h2 id="a-metaphor">Answer metaphor</h2>
              <p class="hint">Analogy to lock it into memory.</p>
            </div>
          </section>

          <!-- Left face = Real-World -->
          <section class="face left">
            <div>
              <div class="tag">Answer — Real-World</div>
              <h2 id="a-realworld">Answer real-world</h2>
              <p class="hint">How it plays out day-to-day.</p>
            </div>
          </section>
        </div>

        <!-- ASCII panel overlay -->
        <div id="ascii-face">
          <div>
            <div class="tag">ASCII Diagram</div>
            <pre id="ascii-text">[ASCII diagram here]</pre>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
  document.addEventListener('DOMContentLoaded', function(){
    const cube = document.getElementById('cube');
    const qEl  = document.getElementById('q');
    const aTB  = document.getElementById('a-textbook');
    const aMF  = document.getElementById('a-metaphor');
    const aRW  = document.getElementById('a-realworld');
    const progressEl = document.getElementById('progress');
    const asciiFace = document.getElementById('ascii-face');
    const asciiText = document.getElementById('ascii-text');

    const btnQ  = document.getElementById('btnQ');
    const btnTB = document.getElementById('btnTB');
    const btnMF = document.getElementById('btnMF');
    const btnRW = document.getElementById('btnRW');
    const btnASCII = document.getElementById('btnASCII');

    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const rotateBtn = document.getElementById('rotateBtn');
    const shuffleBtn = document.getElementById('shuffleBtn');

    let deck = null, idx = 0, rot = 0;

    function setActive(face){
      [btnQ,btnTB,btnMF,btnRW,btnASCII].forEach(b=> b && b.classList.remove('active'));
      if (face >= 0 && face <= 3) {
        [btnQ,btnTB,btnMF,btnRW][face].classList.add('active');
      } else if (face === 'ascii') {
        btnASCII.classList.add('active');
      }
    }

    function rotateTo(face){
      rot = ((face%4)+4)%4;
      if (face === 0) cube.style.transform = "rotateY(0deg)";
      else if (face === 1) cube.style.transform = "rotateY(90deg)";
      else if (face === 2) cube.style.transform = "rotateY(180deg)";
      else if (face === 3) cube.style.transform = "rotateY(-90deg)";
      setActive(rot);
      cube.style.display = "block";
      asciiFace.style.display = "none";
    }

    function render(){
      if(!deck) return;
      const c = deck.cards[idx];
      if(qEl) qEl.textContent  = c.question || '';
      if(aTB) aTB.textContent  = c.answer_textbook || '';
      if(aMF) aMF.textContent  = c.answer_metaphor || '';
      if(aRW) aRW.textContent  = c.answer_realworld || '';
      if(progressEl) progressEl.textContent = `${idx+1} / ${deck.cards.length}`;
      rotateTo(0);

      // update URL hash
      if (c.guid) {
        history.replaceState(null, "", "#" + c.guid);
      }
    }

    async function loadDeck(file){
      try{
        const res = await fetch(new URL(file, location.href).toString()+`?ts=${Date.now()}`, {cache:'no-store'});
        if(!res.ok) throw new Error(`HTTP ${res.status}`);
        const json = await res.json();
        if(!json || !Array.isArray(json.cards)) throw new Error('Invalid deck schema');
        deck = json;

        const hash = location.hash.replace(/^#/, "");
        if (hash) {
          idx = deck.cards.findIndex(c => c.guid === hash);
          if (idx < 0) idx = 0;
        } else {
          idx = 0;
        }

        const title = document.getElementById('deckTitle');
        if(title) title.textContent = deck.title || 'Deck';
        render();
      }catch(e){
        console.error('[loadDeck] Deck load failed', e);
        deck = {
          title:'Demo',
          cards:[{
            guid:"demo-1",
            question:'What is a Docker image?',
            answer_textbook:'A blueprint for containers.',
            answer_metaphor:'A frozen pizza box.',
            answer_realworld:'`docker build` locks app+deps.'
          }]
        };
        idx=0; render();
      }
    }

    function next(){ idx=(idx+1)%deck.cards.length; render(); }
    function prev(){ idx=(idx-1+deck.cards.length)%deck.cards.length; render(); }
    function shuffle(){ 
      for(let i=deck.cards.length-1;i>0;i--){ 
        const j=Math.floor(Math.random()*(i+1)); 
        [deck.cards[i],deck.cards[j]]=[deck.cards[j],deck.cards[i]]; 
      } 
      idx=0; render(); 
    }

    btnQ  && btnQ.addEventListener('click', ()=> rotateTo(0));
    btnTB && btnTB.addEventListener('click',()=> rotateTo(1));
    btnMF && btnMF.addEventListener('click',()=> rotateTo(2));
    btnRW && btnRW.addEventListener('click',()=> rotateTo(3));

    btnASCII && btnASCII.addEventListener('click', ()=> {
      if (!deck || !deck.cards[idx]) return;
      const guid = deck.cards[idx].guid;
      const path = `quiz-ascii/${guid}.txt`;
      fetch(path)
        .then(res => {
          if (!res.ok) throw new Error();
          return res.text();
        })
        .then(data => {
          cube.style.display = "none";
          asciiFace.style.display = "flex";
          asciiText.textContent = data.trim() || "⚠️ No ASCII diagram content found.";
          setActive('ascii');
        })
        .catch(()=>{
          cube.style.display = "none";
          asciiFace.style.display = "flex";
          asciiText.textContent = "ℹ️ No ASCII diagram exists for this card.";
          setActive('ascii');
        });
    });

    prevBtn    && prevBtn.addEventListener('click', prev);
    nextBtn    && nextBtn.addEventListener('click', next);
    rotateBtn  && rotateBtn.addEventListener('click', ()=>rotateTo(rot+1));
    shuffleBtn && shuffleBtn.addEventListener('click', shuffle);

    window.addEventListener('keydown',(e)=>{
      if(e.key==='1') rotateTo(0);
      else if(e.key==='2') rotateTo(1);
      else if(e.key==='3') rotateTo(2);
      else if(e.key==='4') rotateTo(3);
      else if(e.key==='a'){ btnASCII.click(); }
      else if(e.code==='Space'){ e.preventDefault(); rotateTo(rot+1); }
      else if(e.key==='ArrowRight') next();
      else if(e.key==='ArrowLeft')  prev();
    });

    loadDeck('flash-card-file.json');
  });
  </script>
</body>
</html>
